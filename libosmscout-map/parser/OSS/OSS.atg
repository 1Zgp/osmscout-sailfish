#include <iostream>
#include <limits>
#include <sstream>

#include <osmscout/TypeConfig.h>

#include <osmscout/util/String.h>

COMPILER OSS

static std::string Destring(const char* str)
{
  std::string result(str);

  if (result.length()>=2 &&
      result[0]=='"' &&
      result[result.length()-1]=='"') {
    result=result.substr(1,result.length()-2);
  }

  return result;
}

static bool StringToDouble(const char* string, double& value)
{
  std::istringstream buffer(string);

  buffer.imbue(std::locale::classic());

  buffer >> value;

  return !buffer.fail() && !buffer.bad() && buffer.eof();
}

static size_t GetHexDigitValue(char c)
{
  if (c>='0' && c<='9') {
    return c-'0';
  }
  else if (c>='a' && c<='f') {
    return 10+(c-'a');
  }

  assert(false);
}

static void ToRGBA(const char* str, Color& color)
{
  double r=(16*GetHexDigitValue(str[1])+GetHexDigitValue(str[2]))/255.0;
  double g=(16*GetHexDigitValue(str[3])+GetHexDigitValue(str[4]))/255.0;
  double b=(16*GetHexDigitValue(str[5])+GetHexDigitValue(str[6]))/255.0;
  double a;

  if (strlen(str)==9) {
    a=(16*GetHexDigitValue(str[7])+GetHexDigitValue(str[8]))/255.0;
  }
  else {
    a=1.0;
  }
  
  color=Color(r,g,b,a);
}

CHARACTERS
  letter     = 'a'..'z' + 'A'..'Z'.
  digit      = '0'..'9'.
  hexdigit   = 'a'..'f' + '0'..'9'.
  eol        = '\n'.
  stringchar = ANY - '"'.
  quotchar   = ANY.

TOKENS
  ident      = letter {letter | '_'}.
  number     = ['-'] digit {digit}.
  double     = ['-'] digit {digit} '.' digit {digit}.
  color      = "#" hexdigit hexdigit hexdigit hexdigit hexdigit hexdigit [hexdigit hexdigit].
  string     = '"' {stringchar | '\\' quotchar} '"'.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO eol

IGNORE ' ' + '\t' + '\r' + '\n'

PRODUCTIONS
  OSS         = SYNC "OSS"
                [
                  WAYORDER
                ]
                {
                  STYLE
                }
                "END"
                (.
              	  for (TypeId type=0; type<=config.GetTypeConfig()->GetMaxTypeId(); type++) {
              	    if (config.GetTypeConfig()->GetTypeInfo(type).CanBeWay()) {
	              	  if (config.GetWayPrio(type)==std::numeric_limits<size_t>::max() &&
	              	      config.GetWayLineStyle(type)!=NULL) {
	                    std::string e="Way type '"+config.GetTypeConfig()->GetTypeInfo(type).GetName()+"' has style but is not in a group";
	                    SemWarning(e.c_str());
	              	  }
		              else if (config.GetWayPrio(type)!=std::numeric_limits<size_t>::max() &&
		                       config.GetWayLineStyle(type)==NULL) {
	                    std::string e="Way type '"+config.GetTypeConfig()->GetTypeInfo(type).GetName()+"' is in group but has no style";
	                    SemWarning(e.c_str());
	              	  }
              	    }
              	  }
                .)
                .
  
  WAYORDER    = "ORDER" "WAYS"
                (. size_t priority=1;.)
                {
                  WAYGROUP<priority>
                  (. priority++;.)
                }
                .
  WAYGROUP<size_t priority>
              = "GROUP"
                [
                  (.
                     std::string wayTypeName;
                     TypeId      wayType;
                  .)
                  string (. wayTypeName=Destring(t->val); .)
                  (.
      	              wayType=config.GetTypeConfig()->GetWayTypeId(wayTypeName);

                      if (wayType==typeIgnore) {
                        std::string e="Unknown way type '"+wayTypeName+"'";
                        SemErr(e.c_str());
                      }
                      else {
                        config.SetWayPrio(wayType,priority);
                      }
                  .)
                ]
                {
                  (.
                     std::string wayTypeName;
                     TypeId      wayType;
                  .)
                  ","
                  string (. wayTypeName=Destring(t->val); .)
                  (.
      	              wayType=config.GetTypeConfig()->GetWayTypeId(wayTypeName);

                      if (wayType==typeIgnore) {
                        std::string e="Unknown way type '"+wayTypeName+"'";
	                    SemErr(e.c_str());
                      }
                      else {
                        config.SetWayPrio(wayType,priority);
                      }
                  .)
                }
                .                 
                 
  STYLE       = NODESTYLE | WAYSTYLE | AREASTYLE.

  NODESTYLE   = (.
                  TypeId      type=typeIgnore;
                  std::string name;
                .)
                SYNC "NODE"
                string (. name=Destring(t->val); .)
                (.
                  type=config.GetTypeConfig()->GetNodeTypeId(name);

                  if (type==typeIgnore) {
                    std::string e="Unknown type '"+name+"'";

                    SemErr(e.c_str());
                  }

                .)
                {
                  (. LabelStyle labelStyle; .)
                  LABELDEF<labelStyle>
                  (. config.SetNodeLabelStyle(type,labelStyle); .)
                | (. LabelStyle refStyle; .)
                  REFDEF<refStyle>
                  (. config.SetNodeRefLabelStyle(type,refStyle); .)
                | (. SymbolStyle symbolStyle; .)
                  SYMBOLDEF<symbolStyle>
                  (. config.SetNodeSymbolStyle(type,symbolStyle); .)
                | (. IconStyle iconStyle; .)
                  ICONDEF<iconStyle>
                  (. config.SetNodeIconStyle(type,iconStyle); .)
                }.
  WAYSTYLE    = (.
                  TypeId      type=typeIgnore;
                  std::string name;
                  Mag         mag;
                .)
                SYNC "WAY"
                string (. name=Destring(t->val); .)
                "MINMAG" MAG<mag>
                (.
                  type=config.GetTypeConfig()->GetWayTypeId(name);

                  if (type==typeIgnore) {
                    std::string e="Unknown type '"+name+"'";

                    SemErr(e.c_str());
                  }
                  else {
                    config.SetWayMag(type,mag);
                  }
                .)
                {
                  (. LineStyle lineStyle; .)
                  LINEDEF<lineStyle>
                  (.
                  config.SetWayLineStyle(type,lineStyle); .)
                | (. LabelStyle labelStyle; .)
                  LABELDEF<labelStyle>
                  (. config.SetWayNameLabelStyle(type,labelStyle); .)
                | (. LabelStyle refStyle; .)
                  REFDEF<refStyle>
                  (. config.SetWayRefLabelStyle(type,refStyle); .)
                }.
  AREASTYLE   = (.
                  TypeId      type=typeIgnore;
                  std::string name;
                  std::string value;
                  Mag         mag=magWorld;
                .)
                SYNC "AREA"
                string (. name=Destring(t->val); .)
                [
                  "MINMAG" MAG<mag>
                ]
                (.
                  type=config.GetTypeConfig()->GetAreaTypeId(name);

                  if (type==typeIgnore) {
                    std::string e="Unknown type '"+name+"'";

                    SemErr(e.c_str());
                  }
                  else if (mag!=magWorld) {
                    config.SetAreaMag(type,mag);
                  }
                .)
                {
                  (.
                    FillStyle   fillStyle;
                  .)
                  FILLDEF<fillStyle>
                  (.
                    config.SetAreaFillStyle(type,fillStyle);
                  .)
                | (. LabelStyle labelStyle; .)
                  LABELDEF<labelStyle>
                  (. config.SetAreaLabelStyle(type,labelStyle); .)
/*
                | (. LabelStyle labelStyle; .)
                  REFDEF<labelStyle>
                  (. config.SetAreaRefLabelStyle(type,labelStyle); .)
*/
                | (. SymbolStyle symbolStyle; .)
                  SYMBOLDEF<symbolStyle>
                  (. config.SetAreaSymbolStyle(type,symbolStyle); .)
                | (. IconStyle iconStyle; .)
                  ICONDEF<iconStyle>
                  (. config.SetAreaIconStyle(type,iconStyle); .)
                }.

  LINEDEF<LineStyle& style>
              = (.
                  Color lineColor;
                .)
                SYNC "LINE"
                COLOR<lineColor>
                (. style.SetLineColor(lineColor); .)

                [SYNC "WITH"
                  [
                    (. Color alternateColor; .)
                    "ALTCOLOR"
                    COLOR<alternateColor>
                    (. style.SetAlternateColor(alternateColor); .)
                  ]

                  [
                    (. Color outlineColor; .)
                    "OUTLINECOLOR"
                    COLOR<outlineColor>
                    (. style.SetOutlineColor(outlineColor); .)
                  ]

                  [
                    (. double dash; .)
                    "DASH"
                    DOUBLE<dash>   (. style.AddDashValue(dash); .)
                    {
                      ","
                      DOUBLE<dash> (. style.AddDashValue(dash); .)
                    }
                    
                    [
                    (. Color gapColor; .)
                      "GAPCOLOR"
                      COLOR<gapColor>
                      (. style.SetGapColor(gapColor); .)
                    ]
                  ]

                  [
                    (. double minWidth=style.GetMinWidth(); .)
                    "MINWIDTH" DISPLAYSIZE<minWidth>
                    (. style.SetMinWidth(minWidth); .)
                  ]

                  [
                    (. double width=style.GetWidth(); .)
                    "WIDTH" MAPSIZE<width>
                    (. style.SetWidth(width); .)
                  ]

                  [
                    (. double outline=style.GetOutline(); .)
                    "OUTLINE" DISPLAYSIZE<outline>
                    (. style.SetOutline(outline); .)
                  ]
                ].

  FILLDEF<FillStyle& style>
              = (.
                  Color fillColor;
                .)
                SYNC "FILL"
                COLOR<fillColor>
                (. style.SetFillColor(fillColor); .)

                [
                  SYNC "PATTERN"
                  string (. style.SetPattern(Destring(t->val)); .)

                  [SYNC "WITH"
                    [
                      (. Mag minMag=style.GetPatternMinMag(); .)
                      MINMAG<minMag>
                      (. style.SetPatternMinMag(minMag); .)
                    ]
                  ]
                ]  
                
                [
                  (. Color borderColor; .)
                  SYNC "BORDER"
                  COLOR<borderColor> (. style.SetBorderColor(borderColor); .)

	              [
	                (. double width=style.GetBorderWidth(); .)
	                "WIDTH" DISPLAYSIZE<width>
	                (. style.SetBorderWidth(width); .)
	              ]

                  [SYNC "WITH"
                    [
                      (. double dash; .)
                      "DASH"
                      DOUBLE<dash>   (. style.AddBorderDashValue(dash); .)
                      {
                        ","
                        DOUBLE<dash> (. style.AddBorderDashValue(dash); .)
                      }
                    ]
                  ]
                ].

  LABELDEF<LabelStyle& style>
              = SYNC "LABEL"

                (. style.SetStyle(LabelStyle::normal); .)

                [SYNC "WITH"
                  [
                    (. LabelStyle::Style s; .)
                    LABELSTYLE<s>
                    (. style.SetStyle(s); .)
                  ]

                  [
                    (. Color textColor; .)
                    "COLOR"
                    COLOR<textColor>
                    (. style.SetTextColor(textColor); .)
                  ]

                  [
                    (. Color bgColor; .)
                    "BGCOLOR"
                    COLOR<bgColor>
                    (. style.SetBgColor(bgColor); .)
                  ]

                  [
                    (. Color borderColor; .)
                    "BORDERCOLOR"
                    COLOR<borderColor>
                    (. style.SetBorderColor(borderColor); .)
                  ]

                  [
                    (. double size=style.GetSize(); .)
                    SIZE<size>
                    (. style.SetSize(size); .)
                  ]

                  [
                    (. Mag minMag=style.GetMinMag(); .)
                    MINMAG<minMag>
                    (. style.SetMinMag(minMag); .)
                  ]

                  [ (. Mag maxMag=style.GetMaxMag(); .)
                    MAXMAG<maxMag>
                    (. style.SetMaxMag(maxMag); .)
                  ]

                  [ (. Mag scaleMag=style.GetScaleAndFadeMag(); .)
                    SCALEMAG<scaleMag>
                    (. style.SetScaleAndFadeMag(scaleMag); .)
                  ]

                  [
                    (. size_t priority; .)
                    "PRIO"
                    INTEGER<priority>
                    (.
                      if (priority>=0 && priority<std::numeric_limits<uint8_t>::max()) {
                        style.SetPriority((uint8_t)priority);
                      }
                      else {
                        std::string e="Priority must be in the interval [0,"+
                                      NumberToString(std::numeric_limits<uint8_t>::max())+"[";

                        SemErr(e.c_str());
                      }
                     .)
                  ]
                ].

  REFDEF<LabelStyle& style>
              = SYNC "REF"

                [SYNC "WITH"
                  [
                    (. LabelStyle::Style s; .)
                    LABELSTYLE<s>
                    (. style.SetStyle(s); .)
                  ]

                  [
                    (. Color textColor; .)
                    "COLOR"
                    COLOR<textColor>
                    (. style.SetTextColor(textColor); .)
                  ]

                  [
                    (. Color bgColor; .)
                    "BGCOLOR"
                    COLOR<bgColor>
                    (. style.SetBgColor(bgColor); .)
                  ]

                  [
                    (. Color borderColor; .)
                    "BORDERCOLOR"
                    COLOR<borderColor>
                    (. style.SetBorderColor(borderColor); .)
                  ]

                  [ (. double size=style.GetSize(); .)
                    SIZE<size>
                    (. style.SetSize(size); .)
                  ]

                  [
                    (. Mag minMag=style.GetMinMag(); .)
                    MINMAG<minMag>
                    (. style.SetMinMag(minMag); .)
                  ]

                  [ (. Mag maxMag=style.GetMaxMag(); .)
                    MAXMAG<maxMag>
                    (. style.SetMaxMag(maxMag); .)
                  ]

                  [ (. Mag scaleMag=style.GetScaleAndFadeMag(); .)
                    SCALEMAG<scaleMag>
                    (. style.SetScaleAndFadeMag(scaleMag); .)
                  ]

                  [
                    (. size_t priority; .)
                    "PRIO"
                    INTEGER<priority>
                    (.
                      if (priority>=0 && priority<std::numeric_limits<uint8_t>::max()) {
                        style.SetPriority((uint8_t)priority);
                      }
                      else {
                        std::string e="Priority must be in the interval [0,"+
                                      NumberToString(std::numeric_limits<uint8_t>::max())+"[";

                        SemErr(e.c_str());
                      }
                    .)
                  ]
                ].

  SYMBOLDEF<SymbolStyle& style>
              = (.
                  SymbolStyle::Style s;
                  Color              fillColor;
                  double             size=style.GetSize();
                .)
                SYNC "SYMBOL"
                SYMBOLSTYLE<s>   (. style.SetStyle(s); .)
                COLOR<fillColor> (. style.SetFillColor(fillColor); .)
                DOUBLE<size>     (. style.SetSize(size); .)

                [SYNC "WITH"

                  [
                    (. Mag minMag=style.GetMinMag(); .)
                    MINMAG<minMag>
                    (. style.SetMinMag(minMag); .)
                  ]
                ].

  ICONDEF<IconStyle& style>
              = SYNC "ICON"
                ident (. style.SetIconName(t->val); .)

                [SYNC "WITH"
                  [
                    (. Mag minMag=style.GetMinMag(); .)
                    MINMAG<minMag>
                    (. style.SetMinMag(minMag); .)
                  ]
                ].

  LABELSTYLE<LabelStyle::Style& style>
              = "STYLE"
                (
                  "normal"    (. style=LabelStyle::normal; .)
                | "contour"   (. style=LabelStyle::contour; .)
                | "plate"     (. style=LabelStyle::plate; .)
                | "emphasize" (. style=LabelStyle::emphasize; .)
                ).

  SYMBOLSTYLE<SymbolStyle::Style& style>
              = (
                  "none"      (. style=SymbolStyle::none; .)
                | "box"       (. style=SymbolStyle::box; .)
                | "triangle"  (. style=SymbolStyle::triangle; .)
                | "circle"    (. style=SymbolStyle::circle; .)
                ).

  COLOR<Color& color>
              = color
                (.
                  if (strlen(t->val)==7 ||
                      strlen(t->val)==9) {
                    ToRGBA(t->val,color);
                  }
                  else {
                    color=Color();
                  }
                .).

  MINMAG<Mag& mag>
              = "MINMAG" MAG<mag>.

  MAXMAG<Mag& mag>
              = "MAXMAG" MAG<mag>.

  SCALEMAG<Mag& mag>
              = "FADE" "AT" MAG<mag>.

  MAG<Mag& mag>
              =  "world"     (. mag=magWorld; .)
               | "continent" (. mag=magContinent; .)
               | "state"     (. mag=magState; .)
               | "stateOver" (. mag=magStateOver; .)
               | "county"    (. mag=magCounty; .)
               | "region"    (. mag=magRegion; .)
               | "proximity" (. mag=magProximity; .)
               | "cityOver"  (. mag=magCityOver; .)
               | "city"      (. mag=magCity; .)
               | "suburb"    (. mag=magSuburb; .)
               | "detail"    (. mag=magDetail; .)
               | "close"     (. mag=magClose; .)
               | "veryClose" (. mag=magVeryClose; .)
               | "block"     (. mag=magBlock; .)
               .

  /** Size in units of screen (currently millimeter) */ 
  DISPLAYSIZE <double& value>
              = DOUBLE<value> "mm".
              
  /** Size in units of map (currently meter) */ 
  MAPSIZE <double& value>
              = DOUBLE<value> "m".

  SIZE<double& value>
              = "SIZE" DOUBLE<value>.

  DOUBLE<double& value>
              = (  number
                  (.
                    if (!StringToDouble(t->val,value)) {
                      std::string e="Cannot parse double '"+std::string(t->val)+"'";

                      SemErr(e.c_str());
                    }
                  .)
                | double
                  (.
                    if (!StringToDouble(t->val,value)) {
                      std::string e="Cannot parse double '"+std::string(t->val)+"'";

                      SemErr(e.c_str());
                    }
                  .)
                ).

  INTEGER<size_t& value>
              = (  number
                  (.
                    if (!StringToNumber(t->val,value)) {
                      std::string e="Cannot parse number '"+std::string(t->val)+"'";

                      SemErr(e.c_str());
                    }
                  .)
                ).
END OSS.

