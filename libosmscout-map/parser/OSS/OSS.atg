#include <iostream>
#include <limits>
#include <list>
#include <sstream>

#include <osmscout/Coord.h>

#include <osmscout/TypeConfig.h>

#include <osmscout/util/String.h>
#include <osmscout/util/Transformation.h>

COMPILER OSS

typedef std::list<FillStyleRef>       FillStyleList;
typedef std::list<IconStyleRef>       IconStyleList;
typedef std::list<TextStyleRef>       TextStyleList;
typedef std::list<LineStyleRef>       LineStyleList;
typedef std::list<PathTextStyleRef>   PathTextStyleList;
typedef std::list<PathShieldStyleRef> PathShieldStyleList;

inline std::string Destring(const char* str)
{
  std::string result(str);

  if (result.length()>=2 &&
      result[0]=='"' &&
      result[result.length()-1]=='"') {
    result=result.substr(1,result.length()-2);
  }

  return result;
}

inline bool StringToDouble(const char* string, double& value)
{
  std::istringstream buffer(string);

  buffer.imbue(std::locale::classic());

  buffer >> value;

  return !buffer.fail() && !buffer.bad() && buffer.eof();
}

inline size_t GetHexDigitValue(char c)
{
  if (c>='0' && c<='9') {
    return c-'0';
  }
  else if (c>='a' && c<='f') {
    return 10+(c-'a');
  }

  assert(false);
}

inline void ToRGBA(const std::string& str, Color& color)
{
  double r=(16*GetHexDigitValue(str[1])+GetHexDigitValue(str[2]))/255.0;
  double g=(16*GetHexDigitValue(str[3])+GetHexDigitValue(str[4]))/255.0;
  double b=(16*GetHexDigitValue(str[5])+GetHexDigitValue(str[6]))/255.0;
  double a;

  if (str.length()==9) {
    a=(16*GetHexDigitValue(str[7])+GetHexDigitValue(str[8]))/255.0;
  }
  else {
    a=1.0;
  }

  color=Color(r,g,b,a);
}

CHARACTERS
  letter     = 'a'..'z' + 'A'..'Z'.
  digit      = '0'..'9'.
  hexdigit   = 'a'..'f' + '0'..'9'.
  eol        = '\n'.
  stringchar = ANY - '"'.
  quotchar   = ANY.

TOKENS
  ident      = ('_' | letter) {letter | digit | '_'}.
  number     = digit {digit}.
  double     = digit {digit} '.' digit {digit}.
  color      = "#" hexdigit hexdigit hexdigit hexdigit hexdigit hexdigit [hexdigit hexdigit].
  variable   = "@" ('_' | letter) {letter | digit | '_'}.
  string     = '"' {stringchar | '\\' quotchar} '"'.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO eol

IGNORE ' ' + '\t' + '\r' + '\n'

PRODUCTIONS
  OSS         = SYNC "OSS"
                [
                  WAYORDER
                ]
                {
                  CONST
                }
                {
                  SYMBOL
                }
                {
                  (. StyleFilter filter; .)
                  STYLE<filter>
                }
                "END"
                (.
                /*
              	  for (TypeId type=0; type<=config.GetTypeConfig()->GetMaxTypeId(); type++) {
              	    if (config.GetTypeConfig()->GetTypeInfo(type).CanBeWay()) {
	              	  if (config.GetWayPrio(type)==std::numeric_limits<size_t>::max() &&
	              	      config.GetWayLineStyle(type)!=NULL) {
	                    std::string e="Way type '"+config.GetTypeConfig()->GetTypeInfo(type).GetName()+"' has style but is not in a group";
	                    SemWarning(e.c_str());
	              	  }
		              else if (config.GetWayPrio(type)!=std::numeric_limits<size_t>::max() &&
		                       config.GetWayLineStyle(type)==NULL) {
	                    std::string e="Way type '"+config.GetTypeConfig()->GetTypeInfo(type).GetName()+"' is in group but has no style";
	                    SemWarning(e.c_str());
	              	  }
              	    }
              	  }*/
                .)
                .

  WAYORDER    = "ORDER" "WAYS"
                (. size_t priority=1;.)
                {
                  WAYGROUP<priority>
                  (. priority++;.)
                }
                .

  WAYGROUP<size_t priority>
              = "GROUP"
                [
                  (.
                     std::string wayTypeName;
                     TypeId      wayType;
                  .)
                  IDENT<wayTypeName>
                  (.
      	              wayType=config.GetTypeConfig()->GetWayTypeId(wayTypeName);

                      if (wayType==typeIgnore) {
                        std::string e="Unknown way type '"+wayTypeName+"'";
                        SemErr(e.c_str());
                      }
                      else {
                        config.SetWayPrio(wayType,priority);
                      }
                  .)
                ]
                {
                  (.
                     std::string wayTypeName;
                     TypeId      wayType;
                  .)
                  ","
                  IDENT<wayTypeName>
                  (.
      	              wayType=config.GetTypeConfig()->GetWayTypeId(wayTypeName);

                      if (wayType==typeIgnore) {
                        std::string e="Unknown way type '"+wayTypeName+"'";
  	                    SemErr(e.c_str());
                      }
                      else {
                        config.SetWayPrio(wayType,priority);
                      }
                  .)
                }
                .

  SYMBOL      = "SYMBOL"
                (.
                  std::string name;
                .)
                IDENT<name>
                (.
                  SymbolRef symbol=new Symbol(name);
                .)
                {
                  POLYGON<*symbol>
                | RECTANGLE<*symbol>
                | CIRCLE<*symbol>
                }
                (.
                  if (!config.RegisterSymbol(symbol)) {
                    std::string e="Map symbol '"+symbol->GetName()+"' is already defined";
                    SemErr(e.c_str());
                  }
                .)
                .

  POLYGON<Symbol& symbol>
              = "POLYGON"
                (.
                  StyleFilter         filter;
                  FillPartialStyle    style;
                  PolygonPrimitiveRef polygon(new PolygonPrimitive(style.style));
                  Coord               coord;
                .)
                COORD<coord>   (. polygon->AddCoord(coord); .)
                COORD<coord>   (. polygon->AddCoord(coord); .)
                {
                  COORD<coord> (. polygon->AddCoord(coord); .)
                }
                SYNC "{"
                {
                  FILLSTYLEATTR<style> WEAK ";"
                }
                SYNC "}"
                (. symbol.AddPrimitive(polygon); .)
                .

  RECTANGLE<Symbol& symbol>
              = "RECTANGLE"
                (.
                  StyleFilter       filter;
                  FillPartialStyle  style;
                  Coord             topLeft;
                  double            width;
                  double            height;
                .)
                COORD<topLeft>
                UDOUBLE<width>
                "x"
                UDOUBLE<height>

                SYNC "{"
                {
                  FILLSTYLEATTR<style> WEAK ";"
                }
                SYNC "}"
                (.
                  symbol.AddPrimitive(new RectanglePrimitive(topLeft,
                                                             width,height,
                                                             style.style));
                .)
                .

  CIRCLE<Symbol& symbol>
              = "CIRCLE"
                (.
                  Coord             center;
                  double            radius;
                  StyleFilter       filter;
                  FillPartialStyle  style;
                .)
                COORD<center>
                UDOUBLE<radius>
                SYNC "{"
                {
                  FILLSTYLEATTR<style> WEAK ";"
                }
                SYNC "}"
                (.
                  symbol.AddPrimitive(new CirclePrimitive(center,
                                                          radius,
                                                          style.style));
                .)
                .

  COORD<Coord& coord>
              = (.
                  double x;
                  double y;
                .)
                DOUBLE<x>
                 ","
                DOUBLE<y>
                (. coord=Coord(x,y); .)
                .

  CONST       = "CONST"
                {
                  CONSTDEF ";"
                }
                .

  CONSTDEF    = COLORCONSTDEF
                .

  COLORCONSTDEF
              = (.
                  std::string      name;
                  StyleVariableRef variable;
                  Color            color;
                .)
                "COLOR"
                IDENT<name>
                (.
                  variable=config.GetVariableByName(name);

                  if (variable.Valid()) {
                    std::string e="Constant already defined";

                    SemErr(e.c_str());
                  }
                .)
                "="
                COLOR<color>
                (.
                  if (!errors->hasErrors) {
                    config.AddVariable(name,new StyleVariableColor(color));
                  }
                .)
                .

  STYLE<StyleFilter filter>
              = [
                  STYLEFILTER<filter>
                ]
                (
                  (
                    "{"
                    {
                      STYLE<filter>
                    }
                    "}"
                  )
                  | STYLEDEF<filter>
                )
                .

  STYLEFILTER<StyleFilter& filter>
              = "["
                   [
                     (.
                       TypeSet     types;
                       std::string name;
                     .)

                     "TYPE"
                     IDENT<name>
                     (.
                       TypeId type=config.GetTypeConfig()->GetTypeId(name);

                       if (type==typeIgnore) {
                         std::string e="Unknown type '"+name+"'";

                         SemErr(e.c_str());
                       }
                       else if (filter.HasTypes() &&
                                !filter.HasType(type)) {
                         std::string e="Type '"+name+"' is not included by parent filter";

                         SemErr(e.c_str());
                       }
                       else {
                         types.SetType(type);
                       }
                     .)
                     {
                       (. std::string name; .)
                       ","
                       IDENT<name>
                       (.
                         TypeId      type=config.GetTypeConfig()->GetTypeId(name);

                         if (type==typeIgnore) {
                           std::string e="Unknown type '"+name+"'";

                           SemErr(e.c_str());
                         }
                         else if (filter.HasTypes() &&
                                  !filter.HasType(type)) {
                           std::string e="Type '"+name+"' is not included by parent filter";

                           SemErr(e.c_str());
                         }
                         else {
                           types.SetType(type);
                         }
                       .)
                     }

                     (. filter.SetTypes(types); .)
                   ]
                   [
                     "MAG"
                     [
                       (. Magnification magnification; .)
                       MAG<magnification>
                       (.
                          size_t level=magnification.GetLevel();

                          if (level<filter.GetMinLevel()) {
                           std::string e="The magnification interval start is not within the parent magnification range";

                           SemErr(e.c_str());
                          }
                          else {
                            filter.SetMinLevel(level);
                          }
                       .)
                     ]
                     "-"
                     [
                       (. Magnification magnification; .)
                       MAG<magnification>
                       (.
                          size_t level=magnification.GetLevel();

                          if (level>filter.GetMaxLevel()) {
                           std::string e="The magnification interval end is not within the parent magnification range";

                           SemErr(e.c_str());
                          }
                          else {
                            filter.SetMaxLevel(level);
                          }
                       .)
                     ]
                   ]
                   [
                     "ONEWAY"
                     (.
                       filter.SetOneway(true);
                     .)
                   ]

                   [
                     (. SizeCondition* sizeCondition; .)
                     "SIZE"
                     SIZECONDITION<sizeCondition>   (. filter.SetSizeCondition(sizeCondition); .)
                   ]
                "]"
                .

  SIZECONDITION<SizeCondition*& condition>
              = (.
                  condition=new SizeCondition();
                  double widthInMeter;
                .)

                UDOUBLE<widthInMeter> "m"
                (.
                  if (widthInMeter<0.0) {
                   std::string e="Width must be >= 0.0";

                   SemErr(e.c_str());
                  }
                .)

                [
                  [
                    (. double minMM; .)
                    UDOUBLE<minMM> "mm"
                    (. if (widthInMeter>0.0) {
                         condition->SetMinMM(minMM/widthInMeter);
                       }
                    .)
                  ]
                  ":"
                  [
                    (. double minPx; .)
                    UDOUBLE<minPx> "px"
                    (. if (widthInMeter>0.0) {
                         condition->SetMinPx(minPx/widthInMeter);
                        }
                    .)
                  ]
                ]
                "<"
                [
                  [
                    (. double maxMM; .)
                    UDOUBLE<maxMM> "mm"
                    (. if (widthInMeter>0.0) {
                         condition->SetMaxMM(maxMM/widthInMeter);
                       }
                    .)
                  ]
                  ":"
                  [
                    (. double maxPx; .)
                    UDOUBLE<maxPx> "px"
                    (. if (widthInMeter>0.0) {
                         condition->SetMaxPx(maxPx/widthInMeter);
                       }
                    .)
                  ]
                ]
                .

  STYLEDEF<StyleFilter filter>
              =   NODESTYLEDEF<filter>
                | WAYSTYLEDEF<filter>
                | AREASTYLEDEF<filter>
                .

  NODESTYLEDEF<StyleFilter filter>
              = SYNC "NODE" "."
                (
                  NODETEXTSTYLE<filter>
                | NODEICONSTYLE<filter>
                )
                .

  NODETEXTSTYLE<StyleFilter filter>
              = SYNC "TEXT"
                (.
                  TextPartialStyle style;
                .)
                SYNC "{"
                {
                  TEXTSTYLEATTR<style> WEAK ";"
                }
                SYNC "}"
                (.
                  config.AddNodeTextStyle(filter,style);
                .)
                .

  NODEICONSTYLE<StyleFilter filter>
              = SYNC "ICON"
                (.
                  IconPartialStyle style;
                .)
                SYNC "{"
                {
                  ICONSTYLEATTR<style> WEAK ";"
                }
                SYNC "}"
                (.
                  config.AddNodeIconStyle(filter,style);
                .)
                .

  WAYSTYLEDEF<StyleFilter filter>
              = SYNC "WAY"
                (
                  WAYSTYLE<filter>
                | "."
                  (
                     WAYPATHTEXTSTYLE<filter>
                  |  WAYPATHSYMBOLSTYLE<filter>
                  |  WAYSHIELDSTYLE<filter>
                  )
                )
                .

  WAYSTYLE<StyleFilter filter>
              = (.
                  LinePartialStyle style;
                .)
                SYNC "{"
                {
                   LINESTYLEATTR<style> WEAK ";"
                }
                SYNC "}"
                (.
                  config.AddWayLineStyle(filter,style);
                .)
                .

  WAYPATHTEXTSTYLE<StyleFilter filter>
              = SYNC "TEXT"
                (.
                  PathTextPartialStyle style;
                .)
                SYNC "{"
                {
                  PATHTEXTSTYLEATTR<style> WEAK ";"
                }
                SYNC "}"
                (.
                  config.AddWayPathTextStyle(filter,style);
                .)
                .

  WAYPATHSYMBOLSTYLE<StyleFilter filter>
              = SYNC "SYMBOL"
                (.
                  PathSymbolPartialStyle style;
                .)
                SYNC "{"
                {
                  PATHSYMBOLSTYLEATTR<style> WEAK ";"
                }
                SYNC "}"
                (.
                  config.AddWayPathSymbolStyle(filter,style);
                .)
                .

  WAYSHIELDSTYLE<StyleFilter filter>
              = SYNC "SHIELD"
                (.
                  PathShieldPartialStyle style;
                .)
                SYNC "{"
                {
                  PATHSHIELDSTYLEATTR<style> WEAK ";"
                }
                SYNC "}"
                (.
                  config.AddWayPathShieldStyle(filter,style);
                .)
                .

  AREASTYLEDEF<StyleFilter filter>
              = SYNC "AREA"
                (
                  AREASTYLE<filter>
                | "."
                  (
                    AREATEXTSTYLE<filter>
                  | AREAICONSTYLE<filter>
                  )
                )
                .

  AREASTYLE<StyleFilter filter>
              = (.
                  FillPartialStyle style;
                .)
                SYNC "{"
                {
                  FILLSTYLEATTR<style> WEAK ";"
                }
                SYNC "}"
                (.
                  config.AddAreaFillStyle(filter,style);
                .)
                .

  AREATEXTSTYLE<StyleFilter filter>
              = SYNC "TEXT"
                (.
                  TextPartialStyle style;
                .)
                SYNC "{"
                {
                  TEXTSTYLEATTR<style> WEAK ";"
                }
                SYNC "}"
                (.
                  config.AddAreaTextStyle(filter,style);
                .)
                .

  AREAICONSTYLE<StyleFilter filter>
              = SYNC "ICON"
                (.
                  IconPartialStyle style;
                .)
                SYNC "{"
                {
                  ICONSTYLEATTR<style> WEAK ";"
                }
                SYNC "}"
                (.
                  config.AddAreaIconStyle(filter,style);
                .)
                .


  LINESTYLEATTR<LinePartialStyle& style>
              = (
                  (. Color lineColor; .)
                  "color" ":" COLOR<lineColor>
                  (.
                  	 style.style->SetLineColor(lineColor);
                     style.attributes.insert(LineStyle::attrLineColor);
                  .)
                | (. Color outlineColor;.)
                  "outlineColor" ":" COLOR<outlineColor>
                  (.
                  	 style.style->SetOutlineColor(outlineColor);
                     style.attributes.insert(LineStyle::attrOutlineColor);
                  .)
                | (.
                    std::vector<double> dashes;
                    double              dash;
                   .)
                  "dash" ":"
                   UDOUBLE<dash>   (. dashes.push_back(dash); .)
                  {
                    ","
                    UDOUBLE<dash>  (. dashes.push_back(dash); .)
                  }
                  (.
                  	 style.style->SetDashes(dashes);
                     style.attributes.insert(LineStyle::attrDashes);
                  .)
                | (. Color gapColor; .)
                  "gapColor" ":" COLOR<gapColor>
                  (.
                  	 style.style->SetGapColor(gapColor);
                     style.attributes.insert(LineStyle::attrGapColor);
                  .)
                | (. double displayWidth; .)
                  "displayWidth" ":"  DISPLAYSIZE<displayWidth>
                  (.
                  	 style.style->SetDisplayWidth(displayWidth);
                     style.attributes.insert(LineStyle::attrDisplayWidth);
                  .)
                | (. double width; .)
                  "width" ":" MAPSIZE<width>
                  (.
                  	 style.style->SetWidth(width);
                     style.attributes.insert(LineStyle::attrWidth);
                  .)
                | (. LineStyle::CapStyle capStyle; .)
                  "cap" ":" CAPSTYLE<capStyle>
                  (.
                  	 style.style->SetCapStyle(capStyle);
                     style.attributes.insert(LineStyle::attrCapStyle);
                  .)
                | (. double outline; .)
                  "outline" ":" DISPLAYSIZE<outline>
                  (.
                  	 style.style->SetOutline(outline);
                     style.attributes.insert(LineStyle::attrOutline);
                  .)
                )
                .

  FILLSTYLEATTR<FillPartialStyle& style>
              = (
                  (. Color fillColor; .)
                  "color" ":" COLOR<fillColor>
                  (.
                  	 style.style->SetFillColor(fillColor);
                     style.attributes.insert(FillStyle::attrFillColor);
                  .)
                | (. std::string patternName; .)
                  "pattern" ":" STRING<patternName>
                  (.
                  	 style.style->SetPattern(patternName);
                     style.attributes.insert(FillStyle::attrPattern);
                  .)
                | (. Magnification minMag; .)
                  "patternMinMag" ":" MAG<minMag>
                  (.
                  	 style.style->SetPatternMinMag(minMag);
                     style.attributes.insert(FillStyle::attrPatternMinMag);
                  .)
                | (. Color borderColor; .)
                  "borderColor" ":" COLOR<borderColor>
                  (.
                  	 style.style->SetBorderColor(borderColor);
                     style.attributes.insert(FillStyle::attrBorderColor);
                  .)
                | (. double width; .)
	              "borderWidth" ":" DISPLAYSIZE<width>
                  (.
                  	 style.style->SetBorderWidth(width);
                     style.attributes.insert(FillStyle::attrBorderWidth);
                  .)
                | (.
                    std::vector<double> dashes;
                    double              dash;
                   .)
                  "borderDash" ":"
                   UDOUBLE<dash>   (. dashes.push_back(dash); .)
                  {
                    ","
                    UDOUBLE<dash>  (. dashes.push_back(dash); .)
                  }
                  (.
                  	 style.style->SetBorderDashes(dashes);
                     style.attributes.insert(FillStyle::attrBorderDashes);
                  .)
                )
                .

  TEXTSTYLEATTR<TextPartialStyle& style>
              = (
                  (. TextStyle::Label label; .)
                  "label" ":" TEXTLABEL<label>
                  (.
                     style.style->SetLabel(label);
                     style.attributes.insert(TextStyle::attrLabel);
                  .)
                | (. TextStyle::Style labelStyle; .)
                  "style" ":" LABELSTYLE<labelStyle>
                  (.
                     style.style->SetStyle(labelStyle);
                     style.attributes.insert(TextStyle::attrStyle);
                  .)
                | (. Color textColor; .)
                  "color" ":" COLOR<textColor>
                  (.
                     style.style->SetTextColor(textColor);
                     style.attributes.insert(TextStyle::attrTextColor);
                  .)
                | (. double size; .)
                  "size" ":" UDOUBLE<size>
                  (.
                     style.style->SetSize(size);
                     style.attributes.insert(TextStyle::attrSize);
                  .)
                | (. Magnification scaleMag; .)
                  "scaleMag" ":" MAG<scaleMag>
                  (.
                     style.style->SetScaleAndFadeMag(scaleMag);
                     style.attributes.insert(TextStyle::attrScaleAndFadeMag);
                  .)
                | (. size_t priority; .)
                  "priority" ":" UINT<priority>
	              (.
	                if (priority>=0 && priority<std::numeric_limits<uint8_t>::max()) {
                     style.style->SetPriority((uint8_t)priority);
                     style.attributes.insert(TextStyle::attrPriority);
	                }
	                else {
	                  std::string e="Priority must be in the interval [0,"+
	                                NumberToString(std::numeric_limits<uint8_t>::max())+"[";

	                  SemErr(e.c_str());
	                }
	               .)
                )
                .

  PATHSHIELDSTYLEATTR<PathShieldPartialStyle& style>
              = (
                  (. ShieldStyle::Label label; .)
                  "label" ":" SHIELDLABEL<label>
                  (.
                     style.style->SetLabel(label);
                     style.attributes.insert(PathShieldStyle::attrLabel);
                  .)
                | (. Color textColor; .)
                  "color" ":" COLOR<textColor>
                  (.
                     style.style->SetTextColor(textColor);
                     style.attributes.insert(PathShieldStyle::attrTextColor);
                  .)
                | (. Color bgColor; .)
                  "backgroundColor" ":" COLOR<bgColor>
                  (.
                     style.style->SetBgColor(bgColor);
                     style.attributes.insert(PathShieldStyle::attrBgColor);
                  .)
                | (. Color borderColor; .)
   	              "borderColor" ":" COLOR<borderColor>
                  (.
                     style.style->SetBorderColor(borderColor);
                     style.attributes.insert(PathShieldStyle::attrBorderColor);
                  .)
                | (. double size; .)
                  "size" ":" UDOUBLE<size>
                  (.
                     style.style->SetSize(size);
                     style.attributes.insert(PathShieldStyle::attrSize);
                  .)
                | (. size_t priority; .)
                  "priority" ":" UINT<priority>
	              (.
	                if (priority>=0 && priority<std::numeric_limits<uint8_t>::max()) {
                     style.style->SetPriority((uint8_t)priority);
                     style.attributes.insert(PathShieldStyle::attrPriority);
	                }
	                else {
	                  std::string e="Priority must be in the interval [0,"+
	                                NumberToString(std::numeric_limits<uint8_t>::max())+"[";

	                  SemErr(e.c_str());
	                }
	               .)
                | (. double shieldSpace; .)
                  "shieldSpace" ":" DISPLAYSIZE<shieldSpace>
                  (.
                     style.style->SetShieldSpace(shieldSpace);
                     style.attributes.insert(PathShieldStyle::attrShieldSpace);
                  .)
                )
                .

  PATHTEXTSTYLEATTR<PathTextPartialStyle& style>
              = (
                  (. PathTextStyle::Label label; .)
                  "label" ":" PATHTEXTLABEL<label>
                  (.
                     style.style->SetLabel(label);
                     style.attributes.insert(PathTextStyle::attrLabel);
                  .)
                | (. Color textColor; .)
                  "color" ":" COLOR<textColor>
                  (.
                     style.style->SetTextColor(textColor);
                     style.attributes.insert(PathTextStyle::attrTextColor);
                  .)
                | (. double size; .)
                  "size" ":" UDOUBLE<size>
                  (.
                     style.style->SetSize(size);
                     style.attributes.insert(PathTextStyle::attrSize);
                  .)
                )
                .

  PATHSYMBOLSTYLEATTR<PathSymbolPartialStyle& style>
              = (
                  (.
                    std::string name;
                    SymbolRef   symbol;
                   .)
                  "symbol" ":" IDENT<name>
                  (.
                     symbol=config.GetSymbol(name);

                     if (symbol.Invalid()) {
                       std::string e="Map symbol '"+name+"' is not defined";

                       SemErr(e.c_str());
                     }
                     else {
                       style.style->SetSymbol(symbol);
                       style.attributes.insert(PathSymbolStyle::attrSymbol);
                     }
                  .)
                | (. double symbolSpace; .)
                  "symbolSpace" ":" DISPLAYSIZE<symbolSpace>
                  (.
                     style.style->SetSymbolSpace(symbolSpace);
                     style.attributes.insert(PathSymbolStyle::attrSymbolSpace);
                  .)
                )
                .

  ICONSTYLEATTR<IconPartialStyle& style>
              = (
                  (.
                    std::string name;
                    SymbolRef   symbol;
                   .)
                  "symbol" ":" IDENT<name>
                  (.
                     symbol=config.GetSymbol(name);

                     if (symbol.Invalid()) {
                       std::string e="Map symbol '"+name+"' is not defined";

                       SemErr(e.c_str());
                     }
                     else {
                       style.style->SetSymbol(symbol);
                       style.attributes.insert(IconStyle::attrSymbol);
                     }
                  .)
                | (. std::string name; .)
                  "name" ":" IDENT<name>
                  (.
                      style.style->SetIconName(name);
                      style.attributes.insert(IconStyle::attrIconName);
                  .)
                )
                .

  CAPSTYLE<LineStyle::CapStyle& style>
              = (
                  "butt"    (. style=LineStyle::capButt; .)
                | "round"   (. style=LineStyle::capRound; .)
                | "square"  (. style=LineStyle::capSquare; .)
                ).

  LABELSTYLE<TextStyle::Style& style>
              = (
                  "normal"    (. style=TextStyle::normal; .)
                | "emphasize" (. style=TextStyle::emphasize; .)
                ).

  TEXTLABEL<TextStyle::Label& label>
              = (
                  "name" (. label=TextStyle::name; .)
                | "ref"  (. label=TextStyle::ref; .)
                ).

  SHIELDLABEL<ShieldStyle::Label& label>
              = (
                  "name" (. label=ShieldStyle::name; .)
                | "ref"  (. label=ShieldStyle::ref; .)
                ).

  PATHTEXTLABEL<PathTextStyle::Label& label>
              = (
                  "name" (. label=PathTextStyle::name; .)
                | "ref"  (. label=PathTextStyle::ref; .)
                ).

  COLOR<Color& color>
              =   color
                  (.
                    std::string c(t->val);

                    if (c.length()!=7 &&
                        c.length()!=9) {
                     std::string e="Illegal color value";

                      SemErr(e.c_str());
                    }

                    if (!errors->hasErrors) {
                      ToRGBA(c,color);
                    }
                  .)
                | variable
                  (.
                    StyleVariableRef variable=config.GetVariableByName(t->val+1);

                    if (!variable.Valid()) {
                      std::string e="Variable not defined";

                      SemErr(e.c_str());
                    }
                    else if (dynamic_cast<StyleVariableColor*>(variable.Get())==NULL) {
                      std::string e="Variable is not of type 'COLOR'";

                      SemErr(e.c_str());
                    }

                    if (!errors->hasErrors) {
                      StyleVariableColor* colorVariable=dynamic_cast<StyleVariableColor*>(variable.Get());

                      color=colorVariable->GetColor();
                    }
                  .)
                .

  MAG<Magnification& magnification>
              =  "world"     (. magnification.SetMagnification(Magnification::magWorld); .)
               | "continent" (. magnification.SetMagnification(Magnification::magContinent); .)
               | "state"     (. magnification.SetMagnification(Magnification::magState); .)
               | "stateOver" (. magnification.SetMagnification(Magnification::magStateOver); .)
               | "county"    (. magnification.SetMagnification(Magnification::magCounty); .)
               | "region"    (. magnification.SetMagnification(Magnification::magRegion); .)
               | "proximity" (. magnification.SetMagnification(Magnification::magProximity); .)
               | "cityOver"  (. magnification.SetMagnification(Magnification::magCityOver); .)
               | "city"      (. magnification.SetMagnification(Magnification::magCity); .)
               | "suburb"    (. magnification.SetMagnification(Magnification::magSuburb); .)
               | "detail"    (. magnification.SetMagnification(Magnification::magDetail); .)
               | "close"     (. magnification.SetMagnification(Magnification::magClose); .)
               | "veryClose" (. magnification.SetMagnification(Magnification::magVeryClose); .)
               | "block"     (. magnification.SetMagnification(Magnification::magBlock); .)
               | "street"    (. magnification.SetMagnification(Magnification::magStreet); .)
               | "house"     (. magnification.SetMagnification(Magnification::magHouse); .)
               | (. size_t level; .)
                 UINT<level>
                 (. magnification.SetLevel((uint32_t)level); .)
               .

  /** Size in units of screen (currently millimeter) */
  DISPLAYSIZE <double& value>
              = UDOUBLE<value> "mm".

  /** Size in units of map (currently meter) */
  MAPSIZE <double& value>
              = UDOUBLE<value> "m".

  IDENT<std::string& value>
              = ident
                (.
                  value=t->val;
                .)
                .

  STRING<std::string& value>
              = string
                (.
                  value=Destring(t->val);
                .)
                .

  UDOUBLE<double& value>
              = (  number
                  (.
                    if (!StringToDouble(t->val,value)) {
                      std::string e="Cannot parse double '"+std::string(t->val)+"'";

                      SemErr(e.c_str());
                    }
                  .)
                | double
                  (.
                    if (!StringToDouble(t->val,value)) {
                      std::string e="Cannot parse double '"+std::string(t->val)+"'";

                      SemErr(e.c_str());
                    }
                  .)
                ).

  DOUBLE<double& value>
              = (. bool negate=false; .)
                [
                  "-" (. negate=true; .)
                ]
                (
                  number
                  (.
                    if (!StringToDouble(t->val,value)) {
                      std::string e="Cannot parse double '"+std::string(t->val)+"'";

                      SemErr(e.c_str());
                    }
                  .)
                |
                  double
                  (.
                    if (!StringToDouble(t->val,value)) {
                      std::string e="Cannot parse double '"+std::string(t->val)+"'";

                      SemErr(e.c_str());
                    }
                  .)
                )
                (.
                  if (negate) {
                    value=-value;
                  }
                .)
                .


  UINT<size_t& value>
              = (  number
                  (.
                    if (!StringToNumber(t->val,value)) {
                      std::string e="Cannot parse number '"+std::string(t->val)+"'";

                      SemErr(e.c_str());
                    }
                  .)
                ).
END OSS.

