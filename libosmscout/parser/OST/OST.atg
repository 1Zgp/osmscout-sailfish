#include <iostream>

#include <osmscout/TypeConfig.h>
#include <osmscout/Util.h>

COMPILER OST

std::string Destring(const char* str)
{
  std::string result(str);

  if (result.length()>=2 &&
      result[0]=='"' &&
      result[result.length()-1]=='"') {
    result=result.substr(1,result.length()-2);
  }

  return result;
}

CHARACTERS
  letter     = 'a'..'z' + 'A'..'Z'.
  digit      = '0'..'9'.
  eol        = '\n'.
  stringchar = ANY - '"'.
  quotchar   = ANY.

TOKENS
  ident      = letter {letter | '_'}.
  number     = digit {digit}.
  string     = '"' {stringchar | '\\' quotchar} '"'.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO eol

IGNORE '\t' + '\r' + '\n'

PRODUCTIONS
  OST         = SYNC "OST" [TYPES] "END".
  TYPES       = SYNC "TYPES" TYPE {TYPE}.
  TYPE        = (.
                  std::string idValue;
                  std::string typeValue;
                  Condition   *condition=NULL;
                  TypeInfo    typeInfo;
                .)
                SYNC "TYPE"
                string
                (.
                  typeValue=Destring(t->val);
                .)
                "WHERE"
                CONDITION<condition>
                (.
                  typeInfo.SetType(typeValue,condition);
                .)

                TYPEKINDS<typeInfo>
                [TYPEOPTIONS<typeInfo>]
                (.
                  config.AddTypeInfo(typeInfo);
                .)
                .

  CONDITION<Condition*& condition>
              = (.
                  std::string nameValue;
                  std::string valueValue;
                .)
                string (. nameValue=Destring(t->val); .)
                "=="
                string (. valueValue=Destring(t->val); .)
                (.
                  TagId tagId=config.RegisterTagForInternalUse(nameValue);

                  condition=new TagEquals(tagId,valueValue);
                .)

                .
  /*
  CONDITIONS  = ANDCOND { "OR" ANDCOND} .
  ANDCOND     = BOOLCOND { "AND" BOOLCOND}.
  BOOLCOND    = string BOOLOP string.
  BOOLOP      = "==".*/

  TYPEKINDS<TypeInfo& typeInfo>
              = "CAN" "BE" TYPEKIND<typeInfo> {TYPEKIND<typeInfo>}.
  TYPEKIND<TypeInfo& typeInfo>
              =  "NODE"      (. typeInfo.CanBeNode(true); .)
               | "WAY"       (. typeInfo.CanBeWay(true); .)
               | "AREA"      (. typeInfo.CanBeArea(true); .)
               | "RELATION"  (. typeInfo.CanBeRelation(true); .)
               .

  TYPEOPTIONS<TypeInfo& typeInfo>
              = "OPTIONS" TYPEOPTION<typeInfo> { TYPEOPTION<typeInfo>}.
  TYPEOPTION<TypeInfo& typeInfo>
              =  "ROUTE" (. typeInfo.CanBeRoute(true); .)
               | "INDEX" (. typeInfo.CanBeIndexed(true); .)
               .

END OST.

